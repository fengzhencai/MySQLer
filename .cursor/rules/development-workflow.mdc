---
description: "开发流程和代码规范"
---

# 开发工作流程规范

基于 [任务清单](mdc:docs/todo-list.md) 的9周开发计划和最佳实践。

## 开发阶段规划

### Phase 1: 基础架构搭建 (Week 1-3)
**当前重点任务**:
- [x] 项目环境搭建和Git仓库初始化
- [x] Docker开发环境配置
- [ ] 数据库表结构设计和迁移脚本
- [ ] JWT认证系统实现
- [ ] 连接管理模块开发
- [ ] 基础DDL执行功能

### Phase 2: 核心功能开发 (Week 4-6)
- WebSocket实时通信系统
- 执行监控和进度推送
- 历史记录管理增强
- 前端界面完善和优化

### Phase 3: 完善与优化 (Week 7-8)
- 安全机制强化和权限控制
- 性能优化和错误处理
- 用户管理和系统配置

### Phase 4: 测试与发布 (Week 9)
- 全面测试和bug修复
- 生产环境部署配置
- 文档完善和用户培训

## Git工作流程

### 分支策略
```
main                 # 生产环境分支
├── develop          # 开发主分支
├── feature/*        # 功能开发分支
├── hotfix/*         # 紧急修复分支
└── release/*        # 发布准备分支
```

### 提交规范
```
type(scope): subject

body

footer
```

**Type类型**:
- `feat`: 新功能
- `fix`: Bug修复  
- `docs`: 文档更新
- `style`: 代码格式调整
- `refactor`: 代码重构
- `test`: 测试代码
- `chore`: 构建工具或辅助工具的变动

**示例**:
```
feat(auth): 实现JWT认证中间件

- 添加JWT token生成和验证逻辑
- 实现认证中间件保护API接口
- 添加用户登录和登出接口

Closes #123
```

## 代码审查规范

### 审查清单
**功能性检查**:
- [ ] 功能实现是否符合需求文档
- [ ] 错误处理是否完善
- [ ] 安全性考虑是否充分
- [ ] 性能影响是否可接受

**代码质量**:
- [ ] 代码风格是否一致
- [ ] 命名是否清晰有意义
- [ ] 注释是否充分和准确
- [ ] 复杂逻辑是否可读

**测试覆盖**:
- [ ] 单元测试是否充分
- [ ] 集成测试是否通过
- [ ] 边界条件是否测试

## 测试策略

### 测试金字塔
```
        E2E Tests (5%)
      ────────────────
    Integration Tests (15%)
  ──────────────────────────
  Unit Tests (80%)
```

### 后端测试
```go
// 单元测试示例
func TestConnectionService_Create(t *testing.T) {
    // Given
    service := NewConnectionService()
    conn := &Connection{
        Name: "测试连接",
        Host: "localhost",
    }
    
    // When
    result, err := service.Create(conn)
    
    // Then
    assert.NoError(t, err)
    assert.NotEmpty(t, result.ID)
}

// 集成测试示例
func TestConnectionAPI_CreateConnection(t *testing.T) {
    // 使用测试数据库进行集成测试
}
```

### 前端测试
```typescript
// 组件测试示例
import { mount } from '@vue/test-utils'
import ConnectionForm from '@/components/ConnectionForm.vue'

describe('ConnectionForm', () => {
  it('should validate required fields', async () => {
    const wrapper = mount(ConnectionForm)
    
    await wrapper.find('form').trigger('submit')
    
    expect(wrapper.find('.error-message').text()).toContain('连接名称不能为空')
  })
})
```

## 开发环境配置

### 本地开发启动
```bash
# 1. 启动基础服务
docker-compose -f docker-compose.dev.yml up -d mysql redis

# 2. 启动后端服务
cd backend
go run cmd/server/main.go

# 3. 启动前端服务  
cd frontend
npm run dev
```

### 环境变量配置
```bash
# .env.development
DB_HOST=localhost
DB_PORT=3306
DB_USER=mysqler
DB_PASSWORD=password
DB_NAME=mysqler_dev

REDIS_HOST=localhost
REDIS_PORT=6379

JWT_SECRET=your-jwt-secret-key
LOG_LEVEL=debug
```

## 代码质量保证

### 静态代码检查
```bash
# Go代码检查
golangci-lint run

# 前端代码检查
npm run lint
npm run type-check
```

### 代码格式化
```bash
# Go代码格式化
go fmt ./...
goimports -w .

# 前端代码格式化
npm run format
```

### 依赖管理
```bash
# Go依赖更新
go mod tidy
go mod vendor

# 前端依赖更新
npm audit fix
npm update
```

## 部署流程

### 开发环境部署
```bash
# 构建和启动
docker-compose -f docker-compose.dev.yml up --build

# 数据库迁移
docker-compose exec app go run cmd/migrate/main.go
```

### 生产环境部署
```bash
# 1. 构建生产镜像
docker build -t mysqler:v1.0.0 .

# 2. 推送到镜像仓库
docker push registry.example.com/mysqler:v1.0.0

# 3. 更新生产环境
docker-compose -f docker-compose.prod.yml pull
docker-compose -f docker-compose.prod.yml up -d

# 4. 健康检查
curl http://localhost:8080/health
```

## 监控和调试

### 日志管理
```go
// 结构化日志示例
logger.WithFields(logrus.Fields{
    "user_id": userID,
    "action": "create_connection",
    "connection_id": connID,
}).Info("连接创建成功")
```

### 性能监控
- API响应时间监控
- 数据库查询性能
- 容器资源使用率
- 执行任务成功率

### 错误追踪
- 错误日志集中收集
- 错误通知和告警
- 错误统计和分析
- 用户反馈处理

## 文档维护

### 开发文档更新
- API文档与代码同步更新
- 架构变更及时记录
- 部署文档保持最新
- 故障排除指南完善

### 用户文档
- 功能使用说明
- 常见问题解答
- 最佳实践指南
- 视频教程制作

## 持续改进

### 技术债务管理
- 定期Code Review
- 重构计划制定
- 性能瓶颈识别
- 安全漏洞修复

### 团队协作
- 每日站会沟通进度
- 周度技术分享
- 月度回顾总结
- 问题解决机制