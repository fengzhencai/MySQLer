---
globs: Dockerfile,docker-compose*.yml,*.dockerfile
---

# Docker 容器化部署规则

## 容器架构

基于 [架构文档](mdc:docs/architecture.md) 的容器化设计：

### 服务组件
- **pt-web**: 主应用服务（Go后端 + Vue前端）
- **mysql**: MySQL 8.0 数据库
- **redis**: Redis 7.0 缓存
- **nginx**: 反向代理（生产环境）
- **pt-executor**: 动态创建的pt工具执行容器

## Dockerfile 规范

### 多阶段构建
```dockerfile
# 前端构建阶段
FROM node:18-alpine AS frontend-builder
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci
COPY frontend/ .
RUN npm run build

# 后端构建阶段
FROM golang:1.21-alpine AS backend-builder
WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download
COPY . .
RUN CGO_ENABLED=0 GOOS=linux go build -o main cmd/server/main.go

# 生产镜像
FROM registry-harbor.yafex.cn/base/percona-server:5.7v6
RUN apt-get update && apt-get install -y percona-toolkit
COPY --from=backend-builder /app/main /app/main
COPY --from=frontend-builder /app/frontend/dist /app/web/dist
EXPOSE 8080
CMD ["/app/main"]
```

## Docker Compose 配置

### 开发环境 (docker-compose.dev.yml)
```yaml
version: '3.8'
services:
  app:
    build: .
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - ENV=development
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/app/logs
    depends_on:
      - mysql
      - redis
```

### 生产环境 (docker-compose.prod.yml)
```yaml
version: '3.8'
services:
  app:
    image: mysqler:latest
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      - DB_HOST=mysql
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
```

## PT工具执行容器

### 动态容器创建
- 基础镜像: `registry-harbor.yafex.cn/base/percona-server:5.7v6`
- 资源限制: CPU 1核，内存1GB
- 网络隔离: 仅允许访问目标数据库
- 自动清理: 执行完成后自动删除容器

### 容器安全
```yaml
# 执行容器安全配置
security_opt:
  - no-new-privileges:true
read_only: true
tmpfs:
  - /tmp
cap_drop:
  - ALL
cap_add:
  - NET_CONNECT
```

## 环境变量配置

### 必需环境变量
- `DB_HOST`: 数据库主机地址
- `DB_USER`: 数据库用户名
- `DB_PASSWORD`: 数据库密码
- `DB_NAME`: 数据库名称
- `REDIS_HOST`: Redis主机地址
- `JWT_SECRET`: JWT签名密钥
- `DOCKER_HOST`: Docker API地址

### 可选环境变量
- `LOG_LEVEL`: 日志级别 (debug/info/warn/error)
- `MAX_CONCURRENT_EXECUTIONS`: 最大并发执行数 (默认10)
- `EXECUTION_TIMEOUT`: 执行超时时间 (默认3600秒)

## 数据持久化

### 数据卷配置
```yaml
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
```

### 备份策略
- 数据库数据: 每日自动备份到宿主机
- 执行日志: 保留30天，自动清理
- 配置文件: 版本控制管理

## 监控和健康检查

### 应用健康检查
```yaml
healthcheck:
  test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s
```

### 日志管理
```yaml
logging:
  driver: "json-file"
  options:
    max-size: "100m"
    max-file: "5"
```

## 部署流程

### 1. 开发环境启动
```bash
# 启动开发环境
docker-compose -f docker-compose.dev.yml up -d

# 查看日志
docker-compose -f docker-compose.dev.yml logs -f app
```

### 2. 生产环境部署
```bash
# 构建生产镜像
docker build -t mysqler:latest .

# 启动生产环境
docker-compose -f docker-compose.prod.yml up -d

# 健康检查
docker-compose -f docker-compose.prod.yml ps
```

### 3. 版本升级
```bash
# 拉取新版本
docker pull mysqler:latest

# 滚动更新
docker-compose -f docker-compose.prod.yml up -d app

# 清理旧镜像
docker image prune -f
```

## 故障排除

### 常见问题
1. **Docker socket权限**: 确保应用容器有访问Docker socket的权限
2. **网络连接**: 检查容器间网络通信
3. **资源限制**: 监控容器资源使用情况
4. **端口冲突**: 确保端口映射没有冲突

### 日志查看
```bash
# 应用日志
docker-compose logs app

# 数据库日志
docker-compose logs mysql

# 系统资源
docker stats
```